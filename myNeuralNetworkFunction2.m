function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jan-2019 20:48:50.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.7622;-0.91094;-3.00797;-1.11492;-0.81994];
x1_step1.gain = [0.284411275769439;0.287902343525076;0.404172678735263;0.433879949756702;0.415697571702635];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.5231663311787589;3.8520482164993637;1.5671598921678409;0.31901050626742056];
IW1_1 = [-1.3025734876000739 3.6674762508380105 -0.58023064803880908 1.114032001187802 0.29793878771960125;1.6808279278475622 0.41569492031236088 0.068592791454207533 -0.039683977746025889 0.57704905898380676;2.9229555742639381 0.40065081955350079 -0.40061684458835445 -0.01027967570621599 0.5674138890954652;1.2130189391063846 0.41839262205937822 0.33652695629691898 0.011839243192505206 0.1275470781562611];

% Layer 2
b2 = 1.5111993584124808;
LW2_1 = [-0.15695431371694285 -1.6836214387186605 0.4417731073865182 0.65314025694776401];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0394948607312473;
y1_step1.xoffset = -2.3731;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
