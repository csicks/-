function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jan-2019 20:34:48.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.7622;-0.91094;-3.00797;-1.11492;-0.81994];
x1_step1.gain = [0.284411275769439;0.287902343525076;0.404172678735263;0.433879949756702;0.415697571702635];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.234813775914807;-3.4068477428877224;-3.1108078785212867;2.5338806420429791];
IW1_1 = [1.7725999131599206 0.32287604627332711 1.3128804724686607 -0.27006186895496803 -0.093915632898130819;-0.682279060413715 -1.6001364379679681 1.3494873880321239 -0.15937368236051994 -0.097478549575997442;-2.6374162505918464 -1.8330493722227801 -0.23561023898009431 1.1414791383794709 0.89724847358720727;1.875493007953013 0.74320666735125807 0.049726903496566999 -0.010820942249144649 -0.62285021419726405];

% Layer 2
b2 = 0.06755913880893033;
LW2_1 = [1.0662148685439468 0.014697167799932104 5.024860016942731e-05 0.2348947512831385];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0394948607312473;
y1_step1.xoffset = -2.3731;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
