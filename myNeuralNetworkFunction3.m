function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jan-2019 20:54:13.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.7622;-0.91094;-3.00797;-1.11492;-0.81994];
x1_step1.gain = [0.284411275769439;0.287902343525076;0.404172678735263;0.433879949756702;0.415697571702635];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.37108730634770015;0.6394660337078345;-0.36292977762186662;2.6063590273478545];
IW1_1 = [-1.3089053023039372 -1.2300840152386485 -1.0184056719553101 -0.3371911908779015 -0.55718538273077389;-1.120094116842804 0.015063054171375333 -1.3648599959066969 -2.2282909739900001 -1.0987356480629282;0.96170692504321131 -1.8178588260505848 -0.1679137261530349 -1.594285905512431 -1.0324831592448076;1.2634827322223223 0.10097936179098178 0.44361112770688294 -2.6760346130660646 2.013911686203715];

% Layer 2
b2 = 0.2698120551745179;
LW2_1 = [-1.1524206839141908 -0.39000122650586899 0.51929300803428124 -0.09401723250041373];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0394948607312473;
y1_step1.xoffset = -2.3731;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
